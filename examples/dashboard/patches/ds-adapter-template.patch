*** Begin Patch
*** Add File: src/lib/dsAdapter.js
+// DS adapter using generated client when available; falls back to fetch/proxies
+
+let dsApi = null;
+export function setDsClient(client) { dsApi = client; }
+export function getDsBase() {
+  return (import.meta.env?.VITE_DS_URL || process.env.VITE_DS_URL || '').replace(/\/$/, '');
+}
+
+export async function getDsHealth() {
+  const base = getDsBase();
+  if (dsApi) {
+    try {
+      const res = await dsApi.v1HealthGet();
+      if (res?.data?.schema_version && res.data.schema_version !== 'ds.v1') throw new Error('schema_version_mismatch');
+      return res.data;
+    } catch {}
+  }
+  const r = await fetch(`${base}/v1/health`);
+  if (!r.ok) throw new Error(`http_${r.status}`);
+  return await r.json();
+}
+
+export async function getDsCapabilities() {
+  const base = getDsBase();
+  if (dsApi) {
+    try {
+      const res = await dsApi.v1CapabilitiesGet();
+      if (res?.data?.schema_version && res.data.schema_version !== 'ds.v1') throw new Error('schema_version_mismatch');
+      return res.data;
+    } catch {}
+  }
+  const r = await fetch(`${base}/v1/capabilities`);
+  if (!r.ok) throw new Error(`http_${r.status}`);
+  return await r.json();
+}
*** End Patch

